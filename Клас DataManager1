public class DataManager implements FileDataManager {

    private final String fileName;

    public DataManager(String fileName) {
        this.fileName = fileName;
    }

    public void saveData(Map<String, List<schedule.Lesson>> schedule) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))) {
            for (Map.Entry<String, List<schedule.Lesson>> entry : schedule.entrySet()) {
                for (schedule.Lesson l : entry.getValue()) {
                    writer.write(l.getDayOfWeek() + "," + l.getLessonNumber() + "," + l.getSubject() + "," + l.getTeacher() + "," + l.getClassroom() + "\n");
                }
            }
        } catch (IOException e) {
            System.out.println("Помилка збереження файлу.");
        }
    }

    @Override
    public void saveData(Map<String, List<schedule.Lesson>> schedule) {

    }

    @Override
    public Map<String, List<schedule.Lesson>> loadData() {
        Map<String, List<schedule.Lesson>> schedule = new HashMap<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 5) {
                    schedule.Lesson lesson = new schedule.Lesson(parts[2], parts[3], parts[4], parts[0], Integer.parseInt(parts[1]));
                    schedule.putIfAbsent(lesson.getDayOfWeek(), new ArrayList<>());
                    schedule.get(lesson.getDayOfWeek()).add(lesson);
                }
            }
        } catch (IOException e) {
            System.out.println("Файл розкладу не знайдено, створюється новий.");
        }
        return schedule;
    }
}
