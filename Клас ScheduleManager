package schedule;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

public class ScheduleManager implements ScheduleOperations, ScheduleDataOperations {
    private final Map<String, Map<Integer, Lesson>> lessons = new HashMap<>();
    private final Map<String, List<Lesson>> teacherLessons = new HashMap<>();

    @Override
    public boolean addLesson(Lesson lesson) {
        Map<Integer, Lesson> dayLessons = lessons.computeIfAbsent(lesson.getDayOfWeek(), k -> new HashMap<>());
        if (dayLessons.containsKey(lesson.getLessonNumber())) {
            System.out.println("Конфлікт: Урок з таким номером вже існує.");
            return false;
        }
        dayLessons.put(lesson.getLessonNumber(), lesson);
        if (lesson.getTeacher() != null) {
            teacherLessons.computeIfAbsent(lesson.getTeacher().getName(), k -> new ArrayList<>()).add(lesson);
        } else {
            System.out.println("Помилка: об'єкт Teacher є null.");
        }
        return true;
    }

    @Override
    public void removeLesson(String dayOfWeek, int lessonNumber) {
        Map<Integer, Lesson> dayLessons = lessons.get(dayOfWeek);
        if (dayLessons != null && dayLessons.containsKey(lessonNumber)) {
            Lesson lessonToRemove = dayLessons.remove(lessonNumber);
            teacherLessons.get(lessonToRemove.getTeacher().getName()).remove(lessonToRemove);
            System.out.println("Урок видалено: " + lessonToRemove);
        } else {
            System.out.println("Урок не знайдено для видалення.");
        }
    }

    @Override
    public void updateLesson(Lesson lesson) {
        if (checkForConflict(lesson)) {
            System.out.println("Урок з таким номером вже існує на цей день.");
            return;
        }

        Map<Integer, Lesson> dayLessons = lessons.get(lesson.getDayOfWeek());
        if (dayLessons != null && dayLessons.containsKey(lesson.getLessonNumber())) {
            Lesson oldLesson = dayLessons.get(lesson.getLessonNumber());

            dayLessons.put(lesson.getLessonNumber(), lesson);
            System.out.println("Урок оновлено: " + lesson);

            if (oldLesson.getTeacher() != null) {
                List<Lesson> oldList = teacherLessons.get(oldLesson.getTeacher().getName());
                if (oldList != null) oldList.remove(oldLesson);
            }

            if (lesson.getTeacher() != null) {
                teacherLessons.computeIfAbsent(lesson.getTeacher().getName(), k -> new ArrayList<>()).add(lesson);
            }

        } else {
            System.out.println("Урок не знайдено для оновлення.");
        }
    }

    @Override
    public void displaySchedule(String dayOfWeek) {
        Map<Integer, Lesson> dayLessons = lessons.getOrDefault(dayOfWeek, new HashMap<>());
        if (dayLessons.isEmpty()) {
            System.out.println("Немає уроків на " + dayOfWeek);
        } else {
            List<Lesson> lessonsList = dayLessons.values().stream()
                    .sorted(Comparator.comparingInt(Lesson::getLessonNumber))
                    .collect(Collectors.toList());

            Map<String, List<Lesson>> fakeMap = new HashMap<>();
            fakeMap.put(dayOfWeek, lessonsList);

            SchedulePrinter.printSchedule(fakeMap, dayOfWeek);
        }
    }

    @Override
    public void displayScheduleForDate(LocalDate date) {
        List<Lesson> allLessons = lessons.values().stream()
                .flatMap(dayMap -> dayMap.values().stream())
                .toList();

        List<Lesson> lessonsForDate = allLessons.stream()
                .filter(lesson -> lesson.getDate().equals(date))
                .sorted(Comparator.comparingInt(Lesson::getLessonNumber))
                .toList();

        if (lessonsForDate.isEmpty()) {
            System.out.println("Уроків на дату " + date + " не знайдено.");
        } else {
            System.out.println("Розклад на " + date + ":");
            for (Lesson lesson : lessonsForDate) {
                System.out.println(lesson);
            }
        }
    }

    @Override
    public void saveSchedule() {
    }

    @Override
    public void saveSchedule(String filename) {
        FileDataManager fileDataManager = new FileDataManager(filename);
        fileDataManager.saveData(lessons);
        System.out.println("Розклад збережено в файл " + filename);
    }

    @Override
    public void loadSchedule(String filename) {
        FileDataManager fileDataManager = new FileDataManager(filename);
        lessons.putAll(fileDataManager.loadData());
        System.out.println("Розклад завантажено з файлу " + filename);
    }

    @Override
    public void displayLessonsByTeacher(Teacher teacher) {
        List<Lesson> lessons = teacherLessons.get(teacher.getName());
        if (lessons == null || lessons.isEmpty()) {
            System.out.println("Немає уроків для " + teacher.getName());
        } else {
            System.out.println("Уроки для " + teacher.getName() + ":");
            lessons.forEach(System.out::println);
        }
    }

    public boolean checkForConflict(Lesson lesson) {
        Map<Integer, Lesson> dayLessons = getLessonsForDay(lesson.getDayOfWeek());
        return dayLessons.containsKey(lesson.getLessonNumber());
    }

    public void saveToFile() {
        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("schedule.dat"))) {
            out.writeObject(this.lessons);
        } catch (IOException e) {
            System.out.println("Помилка при збереженні даних: " + e.getMessage());
        }
    }

    @Override
    public Map<Integer, Lesson> getLessonsForDay(String day) {
        return lessons.getOrDefault(day, new HashMap<>());
    }

    public List<Lesson> findLessonsByTeacher(String teacherName) {
        return teacherLessons.getOrDefault(teacherName, new ArrayList<>());
    }

    public List<Lesson> findLessonsBySubject(String subject) {
        return lessons.values().stream()
                .flatMap(dayLessons -> dayLessons.values().stream())
                .filter(lesson -> lesson.getSubject().equals(subject))
                .collect(Collectors.toList());
    }
}
