package schedule;

import java.io.*;
import java.time.LocalTime;
import java.time.format.DateTimeParseException;
import java.util.*;
import java.util.stream.Collectors;

public class FileDataManager {

    private final String fileName;
    private final Map<String, Map<String, List<Lesson>>> groupLessons;

    public FileDataManager(String filename) {
        this.fileName = filename;
        this.groupLessons = new HashMap<>();
    }

    public void saveData(Map<String, Map<Integer, Lesson>> schedule) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))) {
            for (Map.Entry<String, Map<Integer, Lesson>> entry : schedule.entrySet()) {
                for (Lesson l : entry.getValue().values()) {
                    writer.write(l.getDayOfWeek() + "," + l.getLessonNumber() + "," +
                            l.getSubject() + "," + l.getTeacher().getName() + "," +
                            l.getClassroom() + "," + l.getStartTime() + "," + l.getEndTime() + "\n");
                }
            }
        } catch (IOException e) {
            System.out.println("Помилка збереження файлу.");
        }
    }

    public Map<? extends String, ? extends Map<Integer, Lesson>> loadData() {
        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            String line;
            while ((line = reader.readLine()) != null) {
                Lesson lesson = parseLessonFromString(line);
                addGroupLesson(lesson.getSubject(), lesson);
            }
        } catch (IOException e) {
            System.err.println("Помилка при завантаженні даних: " + e.getMessage());
            e.printStackTrace();
        }
        return null;
    }

    private Lesson parseLessonFromString(String line) {
        String[] parts = line.split(",");
        int lessonNumber = Integer.parseInt(parts[1]);
        String subject = parts[2];
        String teacherName = parts[3];
        String roomNumber = parts[4];
        String dayOfWeek = parts[0];
        String startTime = parts[5];
        String endTime = parts[6];

        Classroom classroom = new Classroom("стандартний", roomNumber);
        return new Lesson(subject, new Teacher(teacherName), classroom, dayOfWeek, lessonNumber, null, startTime, endTime);
    }

    public void addGroupLesson(String groupName, Lesson lesson) {
        groupLessons.computeIfAbsent(groupName, k -> new HashMap<>())
                .computeIfAbsent(lesson.getDayOfWeek(), k -> new ArrayList<>())
                .add(lesson);
    }

    public void displayGroupSchedule(String groupName) {
        if (!groupLessons.containsKey(groupName)) {
            System.out.println("Група не знайдена.");
            return;
        }

        Map<String, List<Lesson>> groupSchedule = groupLessons.get(groupName);
        for (Map.Entry<String, List<Lesson>> entry : groupSchedule.entrySet()) {
            System.out.println("День: " + entry.getKey());
            for (Lesson lesson : entry.getValue()) {
                System.out.println(lesson);
            }
        }
    }

    private String formatLessonToString(Lesson lesson) {
        return String.format("%s,%d,%s,%s,%s,%s,%s",
                lesson.getDayOfWeek(),
                lesson.getLessonNumber(),
                lesson.getSubject(),
                lesson.getTeacher().getName(),
                lesson.getClassroom(),
                lesson.getStartTime(),
                lesson.getEndTime());
    }

    public boolean hasConflict(String groupName, Lesson newLesson) {
        if (!groupLessons.containsKey(groupName)) {
            return false;
        }

        Map<String, List<Lesson>> groupSchedule = groupLessons.get(groupName);
        List<Lesson> lessonsForDay = groupSchedule.get(newLesson.getDayOfWeek());

        if (lessonsForDay != null) {
            for (Lesson existingLesson : lessonsForDay) {
                if (existingLesson.getStartTime().equals(newLesson.getStartTime())) {
                    return true;
                }
            }
        }
        return false;
    }

    public List<Lesson> findLessonsByDay(String dayOfWeek) {
        return groupLessons.values().stream()
                .flatMap(daySchedule -> daySchedule.getOrDefault(dayOfWeek, Collections.emptyList()).stream())
                .collect(Collectors.toList());
    }

    public boolean isValidDay(String dayOfWeek) {
        List<String> validDays = Arrays.asList("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday");
        return validDays.contains(dayOfWeek);
    }

    public boolean isValidTime(String time) {
        try {
            LocalTime.parse(time);
            return true;
        } catch (DateTimeParseException e) {
            return false;
        }
    }

    public void addLesson(String groupName, Lesson newLesson) {
        if (!isValidDay(newLesson.getDayOfWeek())) {
            System.out.println("Некоректний день тижня!");
            return;
        }

        if (!isValidTime(newLesson.getStartTime())) {
            System.out.println("Некоректний час уроку!");
            return;
        }

        if (hasConflict(groupName, newLesson)) {
            System.out.println("Конфлікт! Урок вже є на цей час.");
            return;
        }

        groupLessons.computeIfAbsent(groupName, k -> new HashMap<>())
                .computeIfAbsent(newLesson.getDayOfWeek(), k -> new ArrayList<>())
                .add(newLesson);
        System.out.println("Урок додано успішно.");
    }
}
